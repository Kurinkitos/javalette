-- programs ------------------------------------------------

entrypoints Prog ;

Program.   Prog ::= [TopDef] ;

FnDef.	   TopDef ::= Type Ident "(" [Arg] ")" Blk ;

TypeDef.   TopDef ::= "typedef" "struct" Ident "*" Ident ";" ;

StructDef. TopDef ::= "struct" Ident "{" [Mem] "}" ";" ;

separator nonempty TopDef "" ;

Argument.  Arg ::= Type Ident;

separator  Arg "," ;

Member.    Mem ::= Type Ident ";" ;

separator  nonempty Mem "" ;

-- statements ----------------------------------------------

Block.     Blk ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Blk ;

Decl.      Stmt ::= Type [Item] ";" ;

NoInitVar. Item ::= Ident ;

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass.       Stmt ::= Expr6 "=" Expr  ";" ;

Incr.      Stmt ::= Ident "++"  ";" ;

Decr.      Stmt ::= Ident "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

For.       Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

-- Somewhat ungly hack to try and get rid of conflicts from Type ::= Ident
Array.     Type ::= Type "[]" ;

Int.       Type ::= "int" ;

Doub.      Type ::= "double" ;

Bool.      Type ::= "boolean" ;

Void.      Type ::= "void" ;

DefType.   Type ::= Ident ;


internal   Fun. Type ::= Type "(" [Type] ")" ;

separator  Type "," ;


-- Expressions ---------------------------------------------

-- Typed expression to be used in typechecking, not part of the language
internal ETyped.    Expr9 ::= Type "::" Expr8;

ENew.      Expr7 ::= "new" NItem ;

EIndex.    Expr6 ::= Expr6 "[" Expr "]" ;

EDeref.    Expr6 ::= Expr6 "->" Ident ;

-- Currently just for length, but could be used for structures as well
ESelect.   Expr6 ::= Expr6 "." Ident ;

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitDoub.  Expr6 ::= Double;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr5 ;

Not.       Expr5 ::= "!" Expr5 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 9 ;

separator  Expr "," ;

-- New Targets

NewArray.  NItem ::= Type "[" Expr "]" ;

NewStruct. NItem ::= Type;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

